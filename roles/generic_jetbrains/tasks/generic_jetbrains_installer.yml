---
- name: set install dir
  set_fact:
    install_dir: '{{ local_soft_dir }}/{{ software_name }}/{{ software_version }}'

- name: 'check current {{ software_version }} installation'
  stat:
    path: '{{ install_dir }}'
  register: current_installation

- block:
  - name: '{{ software_name }} tar is present'
    get_url:
      dest: '{{ temp_dir }}/{{ software_version }}.tar.gz'
      url: '{{ software_url }}'

  - name: '{{ software_name }} folder is present'
    file:
      path: '{{ install_dir }}'
      state: directory

  - name: '{{ software_name }} archive is unarchived'
    unarchive:
      src: '{{ temp_dir }}/{{ software_version }}.tar.gz'
      dest: '{{ install_dir }}/'

  - name: find extracted folder name
    find:
      paths: '{{ install_dir }}'
      file_type: directory
      recurse: no
    register: extracted_content

  - name: set exact install dir
    set_fact:
      software_bin_dir: '{{ extracted_content.files[0].path }}/bin'

  - name: add to bin
    file:
      src: '{{ software_bin_dir }}/{{ software_name }}.sh'
      dest: '/usr/local/bin/{{ software_name }}'
      state: link
      mode: 0644
      force: yes
    become: yes

  - name: desktop entry is present
    template:
      src: entry.desktop
      dest: '/usr/share/applications/{{ software_name }}.desktop'
    become: yes
    
  - name: 'settings repository for {{ software_name }} is cloned'
    git:
      repo: 'git@bitbucket.org:hoto/{{ software_name }}-settings-repository.git'
      dest: '{{ home_dir }}/{{ software_config_dir }}/config/settingsRepository/repository'
      update: no
      depth: 1

  when: current_installation.stat.exists == false

